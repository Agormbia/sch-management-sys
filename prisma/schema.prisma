// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id                String   @id @default(cuid())
  fullName          String
  gender            String
  dateOfBirth       DateTime?
  placeOfBirth      String?
  nationality       String?
  religion          String?
  hometown          String?
  homeAddress       String
  gpsAddress        String?
  admissionNumber   String   @unique
  admissionDate     DateTime
  academicYear      String
  classAdmittedInto String
  term              String
  previousSchool    String?
  reasonForTransfer String?
  
  // Guardian Information
  primaryGuardianName         String
  primaryGuardianRelationship String
  primaryGuardianPhone        String
  primaryGuardianEmail        String?
  primaryGuardianOccupation   String?
  primaryGuardianAddress      String?
  
  secondaryGuardianName         String?
  secondaryGuardianPhone        String?
  secondaryGuardianRelationship String?
  secondaryGuardianOccupation   String?
  
  // Emergency Contact
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?
  emergencyContactAltPhone     String?
  
  // Health Information
  bloodGroup         String?
  medicalConditions  String?
  allergies          String?
  doctorContact      String?
  
  // Other Information
  languagesSpoken        String?
  preferredCommunication String?
  remarks                String?
  
  // Files
  studentPhoto String?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  reports   StudentReport[]
  classes   ClassStudent[]
  
  @@map("students")
}

model Teacher {
  id        String   @id @default(cuid())
  teacherId String   @unique
  name      String
  email     String?
  phone     String
  address   String
  photo     String?
  
  // Professional Information
  qualification  String?
  experience     Int?
  specialization String?
  
  // Employment Details
  employmentDate DateTime?
  salary         Float?
  employmentType String? // Full-time, Part-time, Contract
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  subjects TeacherSubject[]
  classes  TeacherClass[]
  
  @@map("teachers")
}

model Subject {
  id          String @id @default(cuid())
  name        String @unique
  code        String @unique
  description String?
  
  // Relations
  teachers TeacherSubject[]
  reports  SubjectScore[]
  
  @@map("subjects")
}

model Class {
  id          String @id @default(cuid())
  name        String @unique
  level       String
  academicYear String
  capacity    Int?
  
  // Relations
  students ClassStudent[]
  teachers TeacherClass[]
  
  @@map("classes")
}

model StudentReport {
  id           String @id @default(cuid())
  studentId    String
  term         String
  academicYear String
  totalScore   Int?
  overallGrade String?
  
  // Relations
  student  Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjects SubjectScore[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("student_reports")
}

model SubjectScore {
  id         String @id @default(cuid())
  reportId   String
  subjectId  String
  classScore Int?
  examScore  Int?
  totalScore Int
  grade      String
  remarks    String?
  
  // Relations
  report  StudentReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  subject Subject       @relation(fields: [subjectId], references: [id])
  
  @@map("subject_scores")
}

// Junction Tables
model TeacherSubject {
  teacherId String
  subjectId String
  
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@id([teacherId, subjectId])
  @@map("teacher_subjects")
}

model TeacherClass {
  teacherId String
  classId   String
  
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@id([teacherId, classId])
  @@map("teacher_classes")
}

model ClassStudent {
  studentId String
  classId   String
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@id([studentId, classId])
  @@map("class_students")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("announcements")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  allDay      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("events")
}
